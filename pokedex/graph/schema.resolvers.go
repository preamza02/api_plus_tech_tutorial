package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"

	"github.com/preamza02/pokedex/database"
	"github.com/preamza02/pokedex/graph/model"
)

// PokemonCreate is the resolver for the pokemonCreate field.
func (r *mutationResolver) PokemonCreate(ctx context.Context, input model.PokemonInput) (*model.Pokemon, error) {
	panic(fmt.Errorf("not implemented: PokemonCreate - pokemonCreate"))
}

// PokemonUpdate is the resolver for the pokemonUpdate field.
func (r *mutationResolver) PokemonUpdate(ctx context.Context, id string, input model.PokemonInput) (*model.Pokemon, error) {
	panic(fmt.Errorf("not implemented: PokemonUpdate - pokemonUpdate"))
}

// PokemonDelete is the resolver for the pokemonDelete field.
func (r *mutationResolver) PokemonDelete(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: PokemonDelete - pokemonDelete"))
}

// Pokemon is the resolver for the pokemon field.
func (r *queryResolver) Pokemon(ctx context.Context, id *string, name *string) (*model.Pokemon, error) {
	panic(fmt.Errorf("not implemented: Pokemon - pokemon"))
}

// Pokemons is the resolver for the pokemons field.
func (r *queryResolver) Pokemons(ctx context.Context) ([]*model.Pokemon, error) {
	pokemons := make([]*database.PokemonModel, 0)
	err := r.DB.NewSelect().Model(&pokemons).Scan(ctx)
	if err != nil {
		return nil, err
	}
	answer := make([]*model.Pokemon, len(pokemons))
	for i, p := range pokemons {
		answer[i] = &model.Pokemon{
			ID:          fmt.Sprint(p.ID),
			Name:        p.Name,
			Description: p.Description,
			Category:    p.Category,
			Type:        make([]model.PokemonType, len(p.Types)),
			Abilities:   p.Abilities,
		}

		for j, t := range p.Types {
			answer[i].Type[j] = model.PokemonType(t.Name)
		}
	}
	return answer, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
