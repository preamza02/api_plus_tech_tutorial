// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Pokemon struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Description *string       `json:"description,omitempty"`
	Category    *string       `json:"category,omitempty"`
	Type        []PokemonType `json:"type"`
	Abilities   []string      `json:"abilities"`
}

type PokemonInput struct {
	Name        string        `json:"name"`
	Description *string       `json:"description,omitempty"`
	Category    string        `json:"category"`
	Type        []PokemonType `json:"type"`
	Abilities   []string      `json:"abilities"`
}

type Query struct {
}

type PokemonType string

const (
	PokemonTypeNormal   PokemonType = "NORMAL"
	PokemonTypeFire     PokemonType = "FIRE"
	PokemonTypeWater    PokemonType = "WATER"
	PokemonTypeIce      PokemonType = "ICE"
	PokemonTypeFighting PokemonType = "FIGHTING"
)

var AllPokemonType = []PokemonType{
	PokemonTypeNormal,
	PokemonTypeFire,
	PokemonTypeWater,
	PokemonTypeIce,
	PokemonTypeFighting,
}

func (e PokemonType) IsValid() bool {
	switch e {
	case PokemonTypeNormal, PokemonTypeFire, PokemonTypeWater, PokemonTypeIce, PokemonTypeFighting:
		return true
	}
	return false
}

func (e PokemonType) String() string {
	return string(e)
}

func (e *PokemonType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PokemonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PokemonType", str)
	}
	return nil
}

func (e PokemonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PokemonType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PokemonType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
